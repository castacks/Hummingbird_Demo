x-common-attributes: &common-attributes
  network_mode: host
  runtime: nvidia
  privileged: true
  ipc: host
  pid: host
  stdin_open: true
  tty: true
  volumes:
    - /tmp/.X11-unix:/tmp/.X11-unix
    - /dev:/dev 
    - /tmp:/tmp 
services:
  base:
    image: tharp789/hummingbird_demo:base-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH}
    build:
      context: ./
      dockerfile: docker/Dockerfile.base
      args:
        L4T_MAJOR: ${L4T_MAJOR}
        L4T_MINOR: ${L4T_MINOR}
        L4T_PATCH: ${L4T_PATCH}

  rtsp:
    image: tharp789/hummingbird_demo:rtsp-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH} 
    build:
      context: ./
      dockerfile: docker/Dockerfile.rtsp
      args:
        BASE_IMAGE: tharp789/hummingbird_demo:base-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH}
    depends_on:
    - base
    command: >
      bash -c "source /opt/ros/humble/install/setup.bash && \
               if [ ! -d "/root/ros2_ws/install" ]; then \
               colcon build --symlink-install; else echo 'Already built'; fi && \
               source /root/ros2_ws/install/local_setup.bash && \
               ros2 launch image2rtsp dual_image2rtsp.launch.py && sleep infinity"
    network_mode: host
    runtime: nvidia
    privileged: true
    ipc: host
    pid: host
    stdin_open: true
    tty: true
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
      - /dev:/dev 
      - /tmp:/tmp 
      - ./image2rtsp/:/root/ros2_ws/:rw
  
  zed_wrapper:
    image: tharp789/hummingbird_demo:zed-wrapper-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH} 
    build: 
      context: ./
      dockerfile: docker/Dockerfile.zed-dev
      args:
        BASE_IMAGE: tharp789/hummingbird_demo:base-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH}
    depends_on:
    - base
    command: >
      bash -c "source /opt/ros/humble/install/setup.bash && \
               source /root/ros2_ws/install/local_setup.bash && \
               ros2 launch zed_wrapper zed_dual_camera.launch.py pose_cam_serial:='${POSE_CAM_SERIAL}' wire_cam_serial:='${WIRE_CAM_SERIAL}' && \ 
               sleep infinity"
    environment:
      - NVIDIA_DRIVER_CAPABILITIES=all
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - POSE_CAM_SERIAL=${POSE_CAM_SERIAL}
      - WIRE_CAM_SERIAL=${WIRE_CAM_SERIAL}
    network_mode: host
    runtime: nvidia
    privileged: true
    ipc: host
    pid: host
    stdin_open: true
    tty: true
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
      - /dev:/dev 
      - /tmp:/tmp 
      - /var/nvidia/nvcam/settings/:/var/nvidia/nvcam/settings/
      - /etc/systemd/system/zed_x_daemon.service:/etc/systemd/system/zed_x_daemon.service
      - /usr/local/zed/resources/:/usr/local/zed/resources/
      - /usr/local/zed/settings/:/usr/local/zed/settings/
      - ./zed_wrapper/config/:/root/ros2_ws/src/zed-ros2-wrapper/zed_wrapper/config/
      - ./zed_wrapper/launch/:/root/ros2_ws/src/zed-ros2-wrapper/zed_wrapper/launch/
  
  autonomy:
    image: tharp789/hummingbird_demo:autonomy-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH} 
    build:
      context: ./ 
      dockerfile: docker/Dockerfile.autonomy
      args:
        BASE_IMAGE: tharp789/hummingbird_demo:base-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH}
    depends_on:
    - base
    command: >
      bash -c "trap 'tmux kill-server' SIGTERM; \ 
         source /opt/ros/humble/install/setup.bash && \
         if [ ! -d '/root/ros2_ws/install' ]; then \
           colcon build --symlink-install; else echo 'Already built'; fi && \
         source /root/ros2_ws/install/setup.bash && \
         export ROSBAG_DATE=\"$(date +'%Y-%m-%d_%H-%M-%S')\" && \
         if [ \"$RECORD\" -eq 1 ]; then \
           echo 'Starting Data Collection at /root/data_collection/zed_data_\$\{ROSBAG_DATE\}' && \
           tmux new -d -s autonomy && \
           tmux send-keys -t autonomy 'ros2 bag record -s mcap -d 60 -o /root/data_collection/data_collect_\$\{ROSBAG_DATE\} /wire_cam/zed_node/left/image_rect_color /wire_cam/zed_node/right/image_rect_color /wire_cam/zed_node/left/camera_info /wire_cam/zed_node/right/camera_info /wire_cam/zed_node/depth/depth_registered /pose_cam/zed_node/left/image_rect_color /pose_cam/zed_node/right/image_rect_color /pose_cam/zed_node/left/camera_info /pose_cam/zed_node/right/camera_info ' ENTER && sleep infinity ; \
         fi && \
         if [ \"$START_TRACKING\" -eq 1 ]; then \
           echo 'Starting Tracking...' && \
           ros2 launch wire_tracking wire_tracking.launch.xml; \
         else \
           echo 'Starting Detection...' && \
           ros2 launch wire_detection wire_detection.launch.xml;
         fi && wait"

    environment:
      - NVIDIA_DRIVER_CAPABILITIES=all
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - START_TRACKING=${START_TRACKING}
      - RECORD=${RECORD}
      - LOCAL_VO=${LOCAL_VO}
      - WIRE_NODE=${WIRE_NODE}
      - RVIZ=${RVIZ}
    deploy:
      # let it use the GPU
      resources:
        reservations:
          devices:
            - driver: nvidia # https://stackoverflow.com/a/70761193
              count: 1
              capabilities: [ gpu ]
    network_mode: host
    runtime: nvidia
    privileged: true
    ipc: host
    pid: host
    stdin_open: true
    tty: true
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
      - /dev:/dev 
      - /tmp:/tmp 
      - ./autonomy/:/root/ros2_ws/:rw
      - ${STORAGE_PATH}:/root/data_collection/:rw