services:
  base:
    image: tharp789/hummingbird_demo:base-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH}
    build:
      context: ./
      dockerfile: docker/Dockerfile.base
      args:
        L4T_MAJOR: ${L4T_MAJOR}
        L4T_MINOR: ${L4T_MINOR}
        L4T_PATCH: ${L4T_PATCH}
    environment:
      - NVIDIA_DRIVER_CAPABILITIES=all
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - NDDS_QOS_PROFILE=/root/rti_sensor_qos_profile.xml
    network_mode: host
    runtime: nvidia
    privileged: true
    ipc: host
    pid: host
    stdin_open: true
    tty: true
    deploy:
      mode: replicated
      replicas: 0

  rtsp:
    image: tharp789/hummingbird_demo:rtsp-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH} 
    build:
      context: ./
      dockerfile: docker/Dockerfile.rtsp
      args:
        BASE_IMAGE: tharp789/hummingbird_demo:base-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH}
    depends_on:
    - base
    command: >
      bash -c "source /root/ros2_ws/install/setup.bash && \
              ros2 launch image2rtsp dual_image2rtsp.launch.py && \
              sleep infinity"
    environment:
      - NVIDIA_DRIVER_CAPABILITIES=all
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - NDDS_QOS_PROFILE=/root/rti_sensor_qos_profile.xml
    network_mode: host
    runtime: nvidia
    privileged: true
    ipc: host
    pid: host
    stdin_open: true
    tty: true
    volumes:
      - /tmp:/tmp 
      - /dev:/dev 
      - ./rti_sensor_qos_profile.xml:/root/rti_sensor_qos_profile.xml 
        
  zed_wrapper:
    image: tharp789/hummingbird_demo:zed-wrapper-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH} 
    build: 
      context: ./
      dockerfile: docker/Dockerfile.zed
      args:
        BASE_IMAGE: tharp789/hummingbird_demo:base-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH}
    depends_on:
    - base
    command: >
      bash -c "source /root/dependencies_ws/install/setup.bash && \
               if [ ! -d '/root/ros2_ws/install' ]; then \
               source ~/.bash_profile && colcon build --symlink-install --parallel-workers $(nproc); 
               else echo 'Already built'; fi && \
               source /root/ros2_ws/install/setup.bash && \
               ros2 launch zed_wrapper zed_dual_camera.launch.py pose_cam_serial:='${POSE_CAM_SERIAL}' wire_cam_serial:='${WIRE_CAM_SERIAL}' && \ 
               sleep infinity"
    environment:
      - NVIDIA_DRIVER_CAPABILITIES=all
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - NDDS_QOS_PROFILE=/root/rti_sensor_qos_profile.xml
      - POSE_CAM_SERIAL=${POSE_CAM_SERIAL}
      - WIRE_CAM_SERIAL=${WIRE_CAM_SERIAL}
    network_mode: host
    runtime: nvidia
    privileged: true
    ipc: host
    pid: host
    stdin_open: true
    tty: true
    volumes:
      - /tmp:/tmp 
      - /dev:/dev 
      - ./rti_sensor_qos_profile.xml:/root/rti_sensor_qos_profile.xml 
      - /var/nvidia/nvcam/settings/:/var/nvidia/nvcam/settings/
      - /etc/systemd/system/zed_x_daemon.service:/etc/systemd/system/zed_x_daemon.service
      - /usr/local/zed/resources/:/usr/local/zed/resources/
      - /usr/local/zed/settings/:/usr/local/zed/settings/
      - ./zed_wrapper/:/root/ros2_ws/
  
  autonomy:
    image: tharp789/hummingbird_demo:autonomy-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH} 
    build:
      context: ./ 
      dockerfile: docker/Dockerfile.autonomy
      args:
        BASE_IMAGE: tharp789/hummingbird_demo:base-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH}
    depends_on:
    - base
    command: >
      bash -c "if [ ! -d '/root/ros2_ws/install' ]; then \
           source ~/.bash_profile && colcon build --symlink-install --parallel-workers $(nproc); 
           else echo 'Already built'; fi && \
         source /root/ros2_ws/install/setup.bash && source /opt/ros/humble/setup.bash && \
         ros2 launch system_bringup bringup.launch.py"

    environment:
      - NVIDIA_DRIVER_CAPABILITIES=all
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - NDDS_QOS_PROFILE=/root/rti_sensor_qos_profile.xml
      - DETECTION=${DETECTION}
      - TRACKING=${TRACKING}
      - RECORD=${RECORD}
      - RVIZ=${RVIZ}
      - VO=${VO}
      - SERVO=${SERVO}
      - MAVROS=${MAVROS}
    deploy:
      # let it use the GPU
      resources:
        reservations:
          devices:
            - driver: nvidia # https://stackoverflow.com/a/70761193
              count: 1
              capabilities: [ gpu ]
    network_mode: host
    runtime: nvidia
    privileged: true
    ipc: host
    pid: host
    stdin_open: true
    tty: true
    volumes:
      - /tmp:/tmp 
      - /dev:/dev 
      - ./rti_sensor_qos_profile.xml:/root/rti_sensor_qos_profile.xml 
      - ./autonomy/:/root/ros2_ws/:rw
      - ${STORAGE_PATH}:/root/data_collection/:rw

networks:
  hummingbird_network:
    driver: bridge
    internal: true
    attachable: true
