services:
  rtsp:
    image: tharp789/hummingbird_demo:rtsp-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH} 
    build:
      context: ./
      dockerfile: docker/Dockerfile.rtsp
      args:
        L4T_MAJOR: ${L4T_MAJOR}
        L4T_MINOR: ${L4T_MINOR}
        L4T_PATCH: ${L4T_PATCH}
    command: >
      bash -c "source /opt/ros/humble/install/setup.bash && \
               if [ ! -d "/root/ros2_ws/install" ]; then \
               colcon build --symlink-install; else echo 'Already built'; fi && \
               source /root/ros2_ws/install/local_setup.bash && \
               ros2 launch image2rtsp dual_image2rtsp.launch.py && sleep infinity"
    network_mode: host
    runtime: nvidia
    privileged: true
    ipc: host
    pid: host
    environment:
      - NVIDIA_DRIVER_CAPABILITIES=all
      - DISPLAY
      - QT_X11_NO_MITSHM=1
    stdin_open: true  # Equivalent to -it for interactive terminal
    tty: true  # Ensures that a pseudo-terminal is allocated
    volumes:
      - /dev:/dev 
      - /tmp:/tmp 
      - /tmp/.X11-unix:/tmp/.X11-unix
      - ./image2rtsp/:/root/ros2_ws/:rw
  
  zed_wrapper:
    image: tharp789/hummingbird_demo:zed-wrapper-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH} 
    build: 
      context: ./
      dockerfile: docker/Dockerfile.zed-dev
      args:
        L4T_MAJOR: ${L4T_MAJOR}
        L4T_MINOR: ${L4T_MINOR}
        L4T_PATCH: ${L4T_PATCH}
    command: >
      bash -c "source /opt/ros/humble/install/setup.bash && \
               source /root/ros2_ws/install/local_setup.bash && \
               ros2 launch zed_wrapper zed_dual_camera.launch.py pose_cam_serial:='${POSE_CAM_SERIAL}' wire_cam_serial:='${WIRE_CAM_SERIAL}' && \ 
               sleep infinity"
    network_mode: host
    runtime: nvidia
    privileged: true
    ipc: host
    pid: host
    environment:
      - NVIDIA_DRIVER_CAPABILITIES=all
      - DISPLAY
      - QT_X11_NO_MITSHM=1
      - POSE_CAM_SERIAL=${POSE_CAM_SERIAL}
      - WIRE_CAM_SERIAL=${WIRE_CAM_SERIAL}
    stdin_open: true  # Equivalent to -it for interactive terminal
    tty: true  # Ensures that a pseudo-terminal is allocated
    volumes:
      - /dev:/dev 
      - /tmp:/tmp 
      - /tmp/.X11-unix:/tmp/.X11-unix
      - /var/nvidia/nvcam/settings/:/var/nvidia/nvcam/settings/
      - /etc/systemd/system/zed_x_daemon.service:/etc/systemd/system/zed_x_daemon.service
      - ${HOME}/zed_docker_ai/:/usr/local/zed/resources/
  
  autonomy:
    image: tharp789/hummingbird_demo:autonomy-${L4T_MAJOR}-${L4T_MINOR}-${L4T_PATCH} 
    build:
      context: ./ 
      dockerfile: docker/Dockerfile.autonomy
      args:
        L4T_MAJOR: ${L4T_MAJOR}
        L4T_MINOR: ${L4T_MINOR}
        L4T_PATCH: ${L4T_PATCH}
    command: >
      bash -c "source /opt/ros/humble/install/setup.bash && \
               if [ ! -d "/root/ros2_ws/install" ]; then \
               colcon build --symlink-install; else echo 'Already built'; fi && \
               source /root/ros2_ws/install/setup.bash && \
               export ROSBAG_DATE="$(date +"%Y-%m-%d_%H-%M-%S")" && \
               if [ "$START_TRACKING" -eq 1 ]; then \
               echo 'Starting Tracking...' && \
               ros2 launch wire_tracking wire_tracking.launch.xml && sleep infinity;
               else echo 'Starting Detection...' && \
               ros2 launch wire_detection wire_detection.launch.xml && sleep infinity; fi"
    network_mode: host
    runtime: nvidia
    privileged: true
    ipc: host
    pid: host
    environment:
      - NVIDIA_DRIVER_CAPABILITIES=all
      - DISPLAY
      - QT_X11_NO_MITSHM=1
      - START_TRACKING=${START_TRACKING}
    stdin_open: true  # Equivalent to -it for interactive terminal
    tty: true  # Ensures that a pseudo-terminal is allocated
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
      - ./autonomy/:/root/ros2_ws/:rw
      - ./data_collection:/root/data_collection/:rw
